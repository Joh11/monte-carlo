""" The script to process the dataset generated by the gen.py script
"""

import numpy as np
import h5py
import matplotlib.pyplot as plt

dataset = "dataset.hdf5"

f = h5py.File(dataset, "r")

def MandSigmaFromSampleDict(d):
    Ms = []
    sigmas = []
    
    for sample in d.values():
        Ms.append(np.mean(sample[:, 8]))
        sigmas.append(np.std(sample[:, 8]))

    return np.mean(Ms), np.mean(sigmas)

def retrieveData():
    """Returns H, T (vectors) and M, sigma (rank 2 arrays)"""
    Hs = [f[Hname].attrs["H"] for Hname in f]
    H0group = f[list(f.keys())[0]]
    Ts = [H0group[Tname].attrs["T"] for Tname in H0group]

    MsAndSigmas = [[list(MandSigmaFromSampleDict(Tgroup)) for Tgroup in Hgroup.values()]
                   for Hgroup in f.values()]

    MsAndSigmas = np.array(MsAndSigmas)

    Ms = MsAndSigmas[:, :, 0]
    sigmas = MsAndSigmas[:, :, 1]
    
    return np.array(Hs), np.array(Ts), Ms, sigmas

def rescale(T, ki, H):
    Tc = 0.70

    delta = 4.8
    gamma = 1.39
    beta = 0.365

    Treduce = T / Tc - 1
    
    return Treduce ** (gamma + beta) / H, ki / H ** (1 / delta - 1)

def scaling():
    ki_fluct = 15 ** 3 * sigmas * sigmas / Ts

    plt.figure()
    for H, ki in zip(Hs, ki_fluct):
        # plt.scatter(Ts, ki, label="H={}".format(H))
        x, y = rescale(Ts, ki, H)
        plt.scatter(x, y, label="H={}".format(H))

    plt.xscale("log")
    plt.xlabel("T")
    plt.ylabel("magnetic susceptibility")
    plt.legend()
    plt.show()

# Hs, Ts, Ms, sigmas = retrieveData()
scaling()


# i=6
# ki_diff = (Ms[i+1] - Ms[i]) / 0.1
# ki_fluct = sigmas[i] * sigmas[i] / Ts

# plt.figure()

# plt.scatter(Ts, ki_diff, label="Diff")
# plt.scatter(Ts, 15 ** 3 * ki_fluct, label="Fluct")

# plt.xlabel("T")
# plt.ylabel("magnetic susceptibility")
# plt.legend()
# plt.title("With H = {}".format(Hs[i]))

# plt.show()

